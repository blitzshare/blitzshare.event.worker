// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "blitzshare.event.worker/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// DeregisterPeer provides a mock function with given fields: peer
func (_m *Registry) DeregisterPeer(peer *domain.P2pPeerDeregisterCmd) error {
	ret := _m.Called(peer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.P2pPeerDeregisterCmd) error); ok {
		r0 = rf(peer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterNode provides a mock function with given fields: node
func (_m *Registry) RegisterNode(node *domain.P2pBootstrapNodeRegistryCmd) (string, error) {
	ret := _m.Called(node)

	var r0 string
	if rf, ok := ret.Get(0).(func(*domain.P2pBootstrapNodeRegistryCmd) string); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.P2pBootstrapNodeRegistryCmd) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPeer provides a mock function with given fields: peer
func (_m *Registry) RegisterPeer(peer *domain.P2pPeerRegistryCmd) (string, error) {
	ret := _m.Called(peer)

	var r0 string
	if rf, ok := ret.Get(0).(func(*domain.P2pPeerRegistryCmd) string); ok {
		r0 = rf(peer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.P2pPeerRegistryCmd) error); ok {
		r1 = rf(peer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
